require('dotenv').config();
const cors = require('cors')// might want to remove before going to prod

/* CODE SNIPPET FROM INDEX.TS */

const path = require('path');
const helmet = require("helmet");

const userRouter= require("./routes/user-router");
const placeRouter= require("./routes/place-router");
const photoRouter = require("./routes/photo-router");
const staticRouter = require("./routes/static-router");
const config = require('./config');

const doHealthCheck = require("./utils/healthCheck");

const configureAuthentication = require("./routes/auth");
const RequiresAuthentication =  require("./middleware");

// very basic CORS setup
app.use(cors({
  origin: config.FRONTEND_URL,
  optionsSuccessStatus: 200,
  credentials: true
}));
/* END*/



var boatsRouter = require('./controllers/boats');
var ownersRouter = require('./controllers/owners');
var historiesRouter = require('./controllers/histories');
var photosRouter = require('./controllers/photos');
var aircrashRouter = require('./controllers/aircrash');
var catalogsRouter = require('./controllers/catalogs');
var usersRouter = require('./controllers/users');


var knex = require('knex');
var express = require('express');

var app = express();
var port = process.env.PORT || 3000;
var _ = require('lodash');


app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods","POST, PUT, GET, OPTIONS")
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization, Ocp-Apim-Subscription-Key");
  next();
});

/* CODE SNIPPET FROM INDEX.TS */
configureAuthentication(app);

app.get("/api/healthCheck", (req, res) => {
  doHealthCheck(res);
});

app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: false })) // for parsing application/x-www-form-urlencoded
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      'default-src': ["'self'"],
      'base-uri': ["'self'"],
      'block-all-mixed-content': [],
      'font-src': ["'self'", 'https:', 'data:'],
      'frame-ancestors': ["'self'"],
      'img-src': ["'self'", 'data:'],
      'object-src': ["'none'"],
      'script-src': ["'self'"],
      'script-src-attr': ["'none'"],
      'style-src': ["'self'", 'https:', "'unsafe-inline'"]
    },
  })
);
/* END */

var conn = knex({
  client: 'mssql',
  connection: {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME,
    options: {
      enableArithAbort: true,
    }
  },
  useNullAsDefault: true 
});

app.set("db", conn);

// URI for tediousJS = `mssql://${process.env.DB_USER}:${process.env.DB_PASS}@${process.env.DB_HOST}/${process.env.DB_NAME}?encrypt=true`
app.get('/', function (req, res) {
  const db = req.app.get('db');

  db.raw("SELECT TOP 1 * FROM Boat.Owner;")
    .then(rows => {
      if (rows.length > 0) { 
        console.log(rows);
        res.status(200).send("Successful Connection");
        return
      }
    })
    .catch((e) => {
      console.error(e);
      res.status(500).send("ERROR: Either the connection to the database isn't working or the query is incorrect");
    });
});

app.use('/api/boats', boatsRouter);
app.use('/api/owners', ownersRouter);
app.use('/api/histories', historiesRouter);
app.use('/api/photos', photosRouter);
app.use('/api/aircrash', aircrashRouter);
app.use('/api/catalogs', catalogsRouter);
app.use('/api/users', usersRouter);

/* CODE SNIPPET FROM INDEX.TS */
app.use("/api/user", RequiresAuthentication, userRouter);
app.use("/api/place", RequiresAuthentication, placeRouter);
app.use("/api/photo", RequiresAuthentication, photoRouter);
app.use("/api", RequiresAuthentication, staticRouter);

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, 'web')));

// if no other routes match, just send the front-end
app.use((req, res) => {
  res.sendFile(path.join(__dirname, 'web') + "/index.html")
})

app.listen(config.API_PORT, () => {
  console.log(`API listenting on port ${config.API_PORT}`);
});

/* END*/

/*
console.log(`Database Info: ${process.env.DB_HOST} ${process.env.DB_NAME}, `,port);
app.listen(port);*/